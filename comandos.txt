fivethirtyeight

cd -> ingresar a carpeta
ls -> Listar archivos -al (a -> oculto) (l -> list)
(..) volver
pwd (ver ruta)
mkdir nombre (crear carpeta) 
touch (crear archivo vacio)
cat (contenido de un archivo)
history (comandos activados)
!numerocomando (repetir comando)
rm + nombre archivo (borrar archivo)
	git rm --cached: Elimina los archivos del área de Staging y del próximo commit pero los mantiene 	en nuestro disco duro.
	git rm --force: Elimina los archivos de Git y del disco duro. 
--help (explicaciones para comandos)  

git init (iniciar git en carpeta principal)

git add (staging) . (Agregar todo)
git commit (repositorio/master) -m "" (mensaje)
git checkout (visualizar cambios) 
	idcommit (Ver de versiones anteriores)
	master (volver a la version actual)

code (abrir visual estudio)

git status (Condicion de los archivos)  

git config --global 
	user.name ""
	user.email ""

git show nombre de archivo (MOstrar cambios historicos)
git log (Id de los cambios) 
gif diff (cambios entre tacked y untraked)
git diff idcommitA idcommitB (Comparar cambios) 
git reset idcommit --hard
	git reset --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios 	que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.
	git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda la información de los 	commits y del área de staging se borra del historial.
	git reset HEAD: Este es el comando para sacar archivos del área de Staging. 

esc shif z z (Salir de un error)
esc i (INgresar texto)




git log --oneline - Te muestra el id commit y el título del commit.
git log --decorate- Te muestra donde se encuentra el head point en el log.
git log --stat - Explica el número de líneas que se cambiaron brevemente.
git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
git log -3 - Limitamos el número de commits.
git log --after=“2018-1-2” ,
git log --after=“today” y
git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html- Busca los commits en un archivo en específico.
git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
git log > log.txt - guardar los logs en un archivo txt

